/**
 * Cookie functions
 */
var cookie = {
    defaults: {expires: 1,path: '/'},
    /**
     * Initialize the default options
     * @param {{expires: number, path: string, domain: string, secure: boolean, SameSite: string}} options Options
     * @returns {cookie} Returns the cookie object
     */
    init:function(options){this.defaults = Object.assign(this.defaults , options);return this;},
    /**
     * Creates a cookie
     * @param {string} name Cookie name
     * @param {any} value Cookie value
     * @param {{expires: number, path: string, domain: string, secure: boolean, SameSite: string}} [options={}] Cookie options
     */
    create:function(name, value, options={}){if(options=Object.assign({},this.defaults,options),!name||/[=;,\s]/.test(name))throw new Error("Invalid cookie name");if(/[;\r\n]/.test(value))throw new Error("Invalid cookie value");let cookie=`${encodeURIComponent(name)}=${encodeURIComponent(value||"")};`;if(options.expires){var date=new Date;date.setTime(date.getTime()+24*options.expires*60*60*1e3),cookie+=` expires=${date.toUTCString()};`}options.path&&(cookie+=` path=${options.path};`),options.domain&&(cookie+=` domain=${options.domain};`),options.secure&&(cookie+=" Secure;"),options.SameSite&&(cookie+=` SameSite=${options.SameSite};`),document.cookie=cookie;},
    /**
     * Read the cookie
     * @param {string} name Cookie name
     * @returns {any} Cookie value
     */
    read:function(name){var nameEQ = name + "=";var ca = document.cookie.split(';');for (var i = 0; i < ca.length; i++) {var c = ca[i];while (c.charAt(0) == ' ') c = c.substring(1, c.length);if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);}return null;},
    /**
     * Deletes the cookie
     * @param {void} name Cookie name
     */
    delete:function(name){if(this.exists(name))this.create(name, "", -1);},
    /**
     * Update the cookie
     * @param {string} name Cookie name
     * @param {any} value Cookie value
     * @param {number} days Cookie expiration time in hours 
     */
    update:function(name, value, days){if(this.exists(name)) this.create(name, value, days);},
    /**
     * Checks if cookie exits
     * @param {string} name Cookie name
     * @returns {boolean} True if cookie exists, false otherwise
     */
    exists:function(name){return (this.read(name) !== null);}
}